class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(head==null || head.next==null || left==right){
            return head;
        }
        ListNode temp=head;
        ListNode curr=null;
        ListNode prev=null;
        ListNode mid=null;
        ListNode newnode=new ListNode(-1);
        ListNode temp1=newnode;
        ListNode last=null;
        ListNode mid1=null;
        boolean flg=true;
        int i=1;
        while(temp!=null){
            if(i==left){
                mid=temp;
                prev=null;
            }
            if(i==left-1){
                prev=temp;
                mid=temp.next;
                temp=temp.next;
                i++;
                prev.next=null;
            }
            if(i==right){
                mid1=temp;
                last=temp.next;
                mid1.next=null;
            }
            i++;
            temp=temp.next;
        } 
        ListNode rev=reverse(mid);
        if(prev==null && last==null){
            return rev;
        }
        if(prev!=null){
            prev.next=rev;
        }
        ListNode l=rev;
        while(l.next!=null){
            l=l.next;
        }
        l.next=last;
        return prev==null ?rev:head;
    }
    public ListNode reverse(ListNode head){
        if(head==null || head.next==null){
            return head;
        }
        ListNode temp=head.next;
        ListNode val=reverse(temp);
        temp.next=head;
        head.next=null;
        return val;
    }
}
